import
{  
GraphQLBoolean,
GraphQLID, 
GraphQLInt, 
GraphQLList, 
GraphQLNonNull,   
GraphQLObjectType,  
GraphQLSchema,   
GraphQLString,
} 
from 'graphql'; 
import
{   
connectionArgs, 
connectionDefinitions, 
connectionFromArray, 
cursorForObjectInConnection,  
fromGlobalId, 
globalIdField, 
mutationWithClientMutationId, 
nodeDefinitions, 
toGlobalId,
} 
from 'graphql-relay';  
import
{  
Todo, 
User,  
addTodo,   
changeTodoStatus,
getTodo,  
getTodos,   
getUser, 
getViewer,  
markAllTodos, 
removeCompletedTodos,  
removeTodo,  
renameTodo, 

} 
from './database';
const { nodeInterface, nodeField } = nodeDefinitions( 
(globalId) => 
{     const { type, id } = fromGlobalId(globalId);
if (type === 'Todo') 
{     
return getTodo(id);   
} 
else if (type === 'User') 
{      
return getUser(id);  
}    
return null; 
}, 
(obj) => 
{     if (obj instanceof Todo) 
{       
return GraphQLTodo;  
}
else if (obj instanceof User)
{      
return GraphQLUser;
}    
return null;
} 
);  
const GraphQLTodo = new GraphQLObjectType({   name: 'Todo',   fields: 
{    
id: globalIdField('Todo'),  
text: 
{     
type: GraphQLString,  
resolve: ({ text }) => text,  
},  
complete:
{      
type: GraphQLBoolean,    
resolve: ({ complete }) => complete,  
},  
},  
interfaces: [nodeInterface], 
}
);  
const {   connectionType: TodosConnection, 
edgeType: GraphQLTodoEdge, } = connectionDefinitions({   name: 'Todo', 
nodeType: GraphQLTodo, }); 
const GraphQLUser = new GraphQLObjectType
(
{   name: 'User',   
fields: {     id: globalIdField('User'),    
todos: {       type: TodosConnection,    
args: {     
status: {         
type: GraphQLString,   
defaultValue: 'any',  
},       
...connectionArgs,   
},   
resolve: (obj, { status, ...args }) =>      
connectionFromArray(getTodos(status), args), 
},    
totalCount: {  
type: GraphQLInt,       
resolve: () => getTodos().length,  
},    
completedCount:
{       type: GraphQLInt,     
resolve: () => getTodos('completed').length, 
},  
},  
interfaces: [nodeInterface], }); 
const Root = new GraphQLObjectType
(
{   name: 'Root', 
fields: 
{    
viewer: 
{       type: GraphQLUser,  
resolve: () => getViewer(),
},    
node: nodeField, 
},
}
); 

export const schema = new GraphQLSchema({  
query: Root,  
mutation: Mutation,
}); 

import React from 'react';
import { AppRegistry } from 'react-native'; 
import Relay,
{   
DefaultNetworkLayer, 
RootContainer, 
} 
from 'react-relay'; 
import viewerQueries from './queries/ViewerQueries';
import TodoApp from './TodoApp'; 
// Since this is a native app instead of a web
// app, we have to tell Relay where to find
// the GraphQL backend. Relay.injectNetworkLayer
(   new DefaultNetworkLayer('http://localhost:8080') ); 

AppRegistry.registerComponent
(   
'TodoRelayMobile',  
() => () => (    
// The "<RootContainer>" component is the entry   
// point for Relay in React Native. It takes the  
// main component - "TodoApp" - and uses  
// "viewerQueries" to kick-off communication    
// with the backend.   
<RootContainer     
Component={TodoApp}  
route={{       
name: 'viewer',      
params: {},      
queries: viewerQueries,  
}}  
/>  
) 
); 

import Relay from 'react-relay'; 
export default 
{  
viewer: () => Relay.QL`query { viewer }`,
}; 

import React, { Component, PropTypes } from 'react'; 
import 
{   View,
TextInput,
} 
from 'react-native';
import Relay from 'react-relay';
import styles from './styles';
import AddTodoMutation from './mutations/AddTodoMutation';
import TodoList from './TodoList'; 
export class TodoRelayMobile extends Component 
{  
static propTypes = 
{    
viewer: PropTypes.any.isRequired, 
relay: PropTypes.shape(
{      
commitUpdate: PropTypes.func.isRequired,  
}),  
}    
// We need to keep track of new todo item text 
// as the user enters them.   state = {     text: '',   }  
// When the user creates the todo by pressing enter,  
// the "AddTodoMutation" is sent to the backend,  
// with the new "text" and the "viewer" as the  
// arguments.   onSubmitEditing = ({ nativeEvent: { text } }) => 
{    
this.props.relay.commitUpdate(   
new AddTodoMutation(
{        
text,      
viewer: this.props.viewer,   
})  
);  
this.setState({ text: '' }); 
}   
onChangeText = text => this.setState({ text })  
render() 
{     
return 
(      
<View style={styles.container}>    
<TextInput         
style={styles.textInput}  
placeholder="What needs to be done?"    
onSubmitEditing={this.onSubmitEditing} 
onChangeText={this.onChangeText}   
value={this.state.text}     
/>       
<TodoList viewer={this.props.viewer} />  
</View>   
);  
} 
} 

// Turns the "TodoApp" component into a Relay
// container component. This is where the data 
// dependency for "TodoApp" is declared. We tell 
// the "queries" value that was passed to "RootContainer" 
// that we want a fragment of fields from the "User" type. 
export default Relay.createContainer(TodoRelayMobile, 
{  
fragments: 
{  
viewer: variables => Relay.QL`  
fragment on User
{         
totalCount,        
${AddTodoMutation.getFragment('viewer')},    
${TodoList.getFragment('viewer', ...variables)},   
}  
`,   }
, 
}
); 

import React, { PropTypes } from 'react'; 
import Relay from 'react-relay';
import { View } from 'react-native'; 
import Todo from './Todo'; 
// The list component itself is quite simple. Note the 
// property that we're using to iterate over - there's
// "edges" and "nodes". This is reflective of a GraphQL
// collection. const TodoList = ({ viewer }) => 
(   
<View>   
{viewer.todos.edges.map(edge =>
(     
<Todo      
key={edge.node.id}    
todo={edge.node}    
viewer={viewer}    
/>    
))
}   
</View> ); 
TodoList.propTypes = 
{   
viewer: PropTypes.any.isRequired, }; 
export default Relay.createContainer(TodoList,
{  
initialVariables: 
{     
status: null,  
},   
// Variables that are sent along with the query. These 
// can come from UI elements. In this case, we want every  
// item, so we're providing a static value.
prepareVariables() 
{    
return 
{     
status: 'any',   
};   
},   
// The fragments used by this component. Notice the  
// arguments that are passed to the "todos" query -   
// "status" and "first". We're also traversing the  
// structure of the graph using "edges" and "node",  
// so that we can tell the backend exactly what  
// data this component needs. 
fragments: 
{   
viewer: () => Relay.QL`  
fragment on User
{        
todos(      
status: $status,    
first: 2147483647  # max GraphQLInt 
) 
{       
edges {     
node {    
id,     
${Todo.getFragment('todo')},  
},        
},    
},        
${Todo.getFragment('viewer')},   
}  
`,  
}, 
}
); 

import React, { Component, PropTypes } from 'react';
import Relay from 'react-relay'; 
import {   Text,   View,   Switch, } from 'react-native'; 
import styles from './styles'; 
import ChangeTodoStatusMutation from   './mutations/ChangeTodoStatusMutation'; 
// How to style the todo text, based on the
// boolean value of the "completed" property. 
const completeStyleMap = new Map
(
[  
[true,
{ textDecorationLine: 'line-through' }
],  
[false, {}], ]); 
class Todo extends Component {   static propTypes = 
{    
relay: PropTypes.any.isRequired,    
viewer: PropTypes.any.isRequired,   
todo: PropTypes.shape(
{     
text: PropTypes.string.isRequired,    
complete: PropTypes.bool.isRequired,  
}), 
}   
// Handles the "switch" button click. The "complete"  
// argument is the value of the switch UI control,  
// which is sent to the "ChangeTodoStatusMutation".   
onValueChange = complete =>   
this.props.relay.commitUpdate(    
new ChangeTodoStatusMutation(
{        
complete,      
todo: this.props.todo,   
viewer: this.props.viewer,   
})   
)   
render() 
{    
// The "todo" is passed in from the "TodoList"   
// component.  
const {      
props: {   
todo: {      
text,     
complete,    
},     
},    
onValueChange,   
} = this;   
// The actual todo is a "<Switch>" component,    
// and the todo item text, styled based on it's  
// "complete" value. 
return (   
<View style={styles.todoItem}>         
<Switch       
value={complete}       
onValueChange={onValueChange}      
/>       
<Text style={completeStyleMap.get(complete)}>          
{text}  
</Text>    
</View>  
);  
}
} 
// The fragments defined here are actually used 
// in the "TodoList" component when it runs the 
// "todos" query. We also have to tell it about 
// the fragments defined by "ChangeTodoStatusMutation".
export default Relay.createContainer
(Todo, 
{   
fragments: 
{     
todo: () => Relay.QL`  
fragment on Todo 
{        
complete,   
id,       
text,   
${ChangeTodoStatusMutation.getFragment('todo')
},     
}
`,    
viewer: () => Relay.QL`   
fragment on User
{    
${ChangeTodoStatusMutation.getFragment('viewer')}, 
}     
`,  
}, 
}
); 
